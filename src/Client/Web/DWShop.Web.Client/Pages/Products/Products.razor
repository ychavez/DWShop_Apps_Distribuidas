@page "/productos"
@using DWShop.Application.Responses.Catalog;
@using DWShop.Client.Infrastructure.Managers.Products.Get;
@using System.Runtime.CompilerServices
@attribute [Authorize]

<MudText Typo="Typo.h2">Productos</MudText>

<MudTable Items="@Elements">
    <HeaderContent>
        <MudTh>Nombre </MudTh>
        <MudTh>Categoria </MudTh>
        <MudTh>Descripcion </MudTh>
        <MudTh>Resumen </MudTh>
        <MudTh>Precio </MudTh>
        <MudTh>Acciones </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nombre">@context.Name</MudTd>
        <MudTd DataLabel="Categoria">@context.Category</MudTd>
        <MudTd DataLabel="Descripcion">@context.Description</MudTd>
        <MudTd DataLabel="Resumen">@context.Summary</MudTd>
        <MudTd DataLabel="Precio">@context.Price</MudTd>
        <MudTd DataLabel="Acciones">
            <MudMenu Label="Acciones" EndIcon="@Icons.Material.Filled.ArrowDropDown">
                <MudMenuItem @onclick="@(() =>InvokeModal())">Editar</MudMenuItem>
                <MudMenuItem>Eliminar</MudMenuItem>
            </MudMenu>
        </MudTd>
    </RowTemplate>
</MudTable>


@code {

    [Inject]
    public IGetProductsManager productManager { get; set; }

    public IEnumerable<ProductResponse> Elements { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var producResponse = await productManager.GetAllProducts();
        if (producResponse.Succeded)
        {
            Elements = producResponse.Data;
        }
    }

    private async Task InvokeModal()
    {
        var options = new DialogOptions() { CloseButton = true };
        _DialogService.Show<AddEditProduct>("Editar", options);
    }

}
