@page "/productos"
@using DWShop.Application.Responses.Catalog;
@using DWShop.Client.Infrastructure.Managers.Products.Get;
@using System.Runtime.CompilerServices
@using DWShop.Application.Features.Catalog.Commands.Update
@attribute [Authorize]

<MudText Typo="Typo.h2">Productos</MudText>

<MudTable Items="@Elements">
    <HeaderContent>
        <MudTh>Nombre </MudTh>
        <MudTh>Categoria </MudTh>
        <MudTh>Descripcion </MudTh>
        <MudTh>Resumen </MudTh>
        <MudTh>Precio </MudTh>
        <MudTh>Acciones </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nombre">@context.Name</MudTd>
        <MudTd DataLabel="Categoria">@context.Category</MudTd>
        <MudTd DataLabel="Descripcion">@context.Description</MudTd>
        <MudTd DataLabel="Resumen">@context.Summary</MudTd>
        <MudTd DataLabel="Precio">@context.Price</MudTd>
        <MudTd DataLabel="Acciones">
            <MudMenu Label="Acciones" EndIcon="@Icons.Material.Filled.ArrowDropDown">
                <MudMenuItem @onclick="@(() =>InvokeModal(@context.Id))">Editar</MudMenuItem>
                <MudMenuItem>Eliminar</MudMenuItem>
            </MudMenu>
        </MudTd>
    </RowTemplate>
</MudTable>


@code {

    [Inject]
    public IGetProductsManager productManager { get; set; }

    public IEnumerable<ProductResponse> Elements { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Reset();
    }

    private async Task Reset()
    {
        var productResponse = await productManager.GetAllProducts();
        if (productResponse.Succeded)
        {
            Elements = productResponse.Data;
        }

    }

    private async Task InvokeModal(int id = 0)
    {
        var parameters = new DialogParameters();
        if (id != 0)
        {
            var product = Elements.FirstOrDefault(x => x.Id == id);

            if (product is not null)
            {
                parameters.Add(nameof(AddEditProduct.EditProductCommand), new UpdateCatalogCommand()
                    {
                        Id = id,
                        Category = product.Category,
                        Description = product.Description,
                        Name = product.Name,
                        PhotoURL = product.PhotoURL,
                        Price = product.Price,
                        Summary = product.Summary
                    });

                var options = new DialogOptions() { CloseButton = true };

                var dialog =  _DialogService.Show<AddEditProduct>("Editar", parameters, options);

                var result = await dialog.Result;

                if (!result.Cancelled)
                    await Reset();
            }
        }
    }
/*
 * 
 *  
 * 
1.- en el la accion eliminar, mostrar un dialogo que nos diga "Estas seguro que deseas eliminar el producto {Nombre}
     y contara con un boton de aceptar -> eliminar el producto y actualizar la tabla

2.- Agregar un boton en la parte superior de la lista de productos y que nos abra el dialogo listo con la logica de 
     crear producto (tambien actualizar la lista y validar errores)

*/
}

